#! /usr/bin/env ruby

stop = proc do
  if defined?(Ost)
    Ost.stop
  else
    exit 0
  end
end

trap(:INT,  &stop)
trap(:TERM, &stop)

require "clap"
require "ost"

opts = {}

args = Clap.run ARGV,
  "-d" => -> {
    opts[:daemonize] = true
  },
  "-p" => ->(dir) { 
    opts[:pids_dir] = dir
  }

action = args.shift
worker = args.shift

action, worker = "start", action unless worker

unless worker
  $stderr.puts "Must indicate a worker name"
  exit 1
end

worker_path = File.expand_path("workers/#{worker}")
pids_dir = opts[:pids_dir] || File.dirname(worker_path)

$stdout.sync = true

pid_path = File.expand_path("#{worker}.pid", pids_dir)

case action
when "start"
  if opts[:daemonize]
    Process.daemon(true)
    File.open(pid_path, File::RDWR|File::EXCL|File::CREAT, 0600) { |io| io.write(Process.pid) }
    at_exit do
      File.delete(pid_path) if File.exists?(pid_path)
    end
  end

  require worker_path
when "kill"
  Process.kill :TERM, File.open(pid_path).read.strip.to_i
else
  $stderr.puts "ost-bin command not recognized. Valid are: start, kill"
  exit 2
end
