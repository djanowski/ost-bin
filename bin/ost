#! /usr/bin/env ruby

stop = proc do
  if defined?(Ost)
    Ost.stop
  else
    exit 0
  end
end

trap(:INT,  &stop)
trap(:TERM, &stop)

usage = <<-EOS
Usage:

  ost start [-r <require>] [-d] [-p <pid-path>] [-l <log-path>]
  ost stop [-p <pid-path>]

EOS

require "clap"
require "ost"

opts = {
  requires: []
}

command, _ = Clap.run ARGV,
  "-d" => -> {
    opts[:daemonize] = true
    opts[:log_path] = File.expand_path("ost.log") unless opts.include?(:log_path)
  },
  "-l" => -> path {
    opts[:log_path] = path
  },
  "-p" => -> path {
    opts[:pid_path] = path
  },
  "-s" => -> size {
    opts[:pool_size] = Integer(size)
  },
  "-r" => -> file {
    opts[:requires] << file
  },
  "-v" => -> {
    require_relative "../lib/ost-bin/version"

    puts Ost::Bin::VERSION

    exit 0
  },
  "-h" => -> {
    puts(usage)
    exit 0
  }

opts[:pid_path] = File.expand_path("ost.pid") unless opts.include?(:pid_path)

opts[:requires].each do |file|
  require(file)
end

module Ost
  def self.run(worker)
    workers[worker] = worker.new
  end

  def self.workers
    @workers ||= {}
  end
end

case command
when "start"
  if opts[:daemonize]
    Process.daemon(true)

    File.open(opts[:pid_path], File::RDWR|File::EXCL|File::CREAT, 0600) do |io|
      io.write(Process.pid)
    end

    at_exit do
      File.delete(opts[:pid_path]) if File.exists?(opts[:pid_path])
    end
  end

  if opts[:log_path]
    $stdout.reopen(opts[:log_path], "a")
    $stderr.reopen(opts[:log_path], "a")
  end

  load "./Ostfile"

  opts[:pool_size] = Ost.workers.size unless opts.include?(:pool_size)

  threads_per_worker = opts[:pool_size] / Ost.workers.size

  if threads_per_worker == 0
    abort("Not enough threads for your workers (found #{Ost.workers.size} workers).")
  end

  pool = Ost.workers.each_with_object([]) do |(queue, handler), accum|
    accum.concat(Array.new(threads_per_worker) do
      Thread.new(queue, handler) do |q, h|
        queue = Ost[q]

        queue.each do |item|
          handler.call(item)
        end
      end
    end)
  end

  pool.each(&:join)

when "stop"
  pid = Integer(File.read(opts[:pid_path]).chomp)

  running = true

  Process.kill(:TERM, pid)

  while running
    begin
      Process.kill(0, pid)
      running = true
    rescue Errno::ESRCH
      running = false
    end
  end

else
  $stderr.puts("Unkown command #{command.inspect}.")
  $stderr.puts(usage)

  exit 2
end
